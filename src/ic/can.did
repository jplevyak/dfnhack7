type BatchId = nat;
type ChunkId = nat;
type Key = text;

type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
  streaming_strategy: opt StreamingStrategy;
};

type StreamingCallbackHttpResponse = record {
  body: blob;
  token: opt Token;
};

type Token = record {};

type StreamingStrategy = variant {
  Callback: record {
    callback: func (Token) -> (StreamingCallbackHttpResponse) query;
    token: Token;
  };
};

type RecordResult = record {
  hash: text;
  owner: principal;
  has_datum: bool;
  description: text;
  hidden: bool;
  created: nat64;
};

type Datum = record {
  content_type: text;
  content: blob;
};

service: {
  http_request: (request: HttpRequest) -> (HttpResponse) query;
  http_request_stream_callback: (token: opt Token) -> (StreamingCallbackHttpResponse) query;
  notarize: (datum: Datum, description: text, hidden: bool) -> (opt RecordResult);
  notarize_hash: (hex_sha256: text, description: text) -> (opt RecordResult);
  reveal: (hex_sha256: text) -> (opt RecordResult);
  search: (text) -> (vec RecordResult) query;
  authorize: (principal) -> ();
  clear: () -> ();
  get_datum: (text) -> (opt Datum) query;
  get_data: () -> (vec RecordResult) query;
}
