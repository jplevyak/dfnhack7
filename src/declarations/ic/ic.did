type BatchId = nat;
type ChunkId = nat;
type Key = text;

type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
  streaming_strategy: opt StreamingStrategy;
};

type StreamingCallbackHttpResponse = record {
  body: blob;
  token: opt Token;
};

type Token = record {};

type StreamingStrategy = variant {
  Callback: record {
    callback: func (Token) -> (StreamingCallbackHttpResponse) query;
    token: Token;
  };
};

type RecordResult = record {
  link: text;
  owner: opt principal;
  description: text;
  created: nat64;
};

type Record = record {
  link: text;
  owner: opt principal;
  datum: opt blob;
  description: text;
  created: nat64;
};

type UpdatedRecordResult = record {
  link: text;
  canister_id: opt text;
};

service: {

  // UNKNOWN: Needs to be updated/test.
  http_request: (request: HttpRequest) -> (HttpResponse) query;
  http_request_stream_callback: (token: opt Token) -> (StreamingCallbackHttpResponse) query;

  // STUBS: below this line the methods have stubs.
  notarize: (principal, blob, text) -> (opt RecordResult);

  // DONE: below this line the methods have been implemented/revised.
  authorize: (principal) -> ();
  clear: () -> ();
  get_datum: (text) -> (opt RecordResult) query;
  get_data: () -> (vec RecordResult) query;
  search: (text) -> (vec RecordResult) query;
}
